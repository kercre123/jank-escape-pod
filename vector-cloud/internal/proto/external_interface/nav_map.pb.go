// Code generated by protoc-gen-go. DO NOT EDIT.
// source: nav_map.proto

package Anki_Vector_external_interface

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Every tile in the nav map will be tagged with a content key referring to
// the different environmental elements that Vector can identify.
type NavNodeContentType int32

const (
	NavNodeContentType_NAV_NODE_UNKNOWN                     NavNodeContentType = 0
	NavNodeContentType_NAV_NODE_CLEAR_OF_OBSTACLE           NavNodeContentType = 1
	NavNodeContentType_NAV_NODE_CLEAR_OF_CLIFF              NavNodeContentType = 2
	NavNodeContentType_NAV_NODE_OBSTACLE_CUBE               NavNodeContentType = 3
	NavNodeContentType_NAV_NODE_OBSTACLE_PROXIMITY          NavNodeContentType = 4
	NavNodeContentType_NAV_NODE_OBSTACLE_PROXIMITY_EXPLORED NavNodeContentType = 5
	NavNodeContentType_NAV_NODE_OBSTACLE_UNRECOGNIZED       NavNodeContentType = 6
	NavNodeContentType_NAV_NODE_CLIFF                       NavNodeContentType = 7
	NavNodeContentType_NAV_NODE_INTERESTING_EDGE            NavNodeContentType = 8
	NavNodeContentType_NAV_NODE_NON_INTERESTING_EDGE        NavNodeContentType = 9
)

var NavNodeContentType_name = map[int32]string{
	0: "NAV_NODE_UNKNOWN",
	1: "NAV_NODE_CLEAR_OF_OBSTACLE",
	2: "NAV_NODE_CLEAR_OF_CLIFF",
	3: "NAV_NODE_OBSTACLE_CUBE",
	4: "NAV_NODE_OBSTACLE_PROXIMITY",
	5: "NAV_NODE_OBSTACLE_PROXIMITY_EXPLORED",
	6: "NAV_NODE_OBSTACLE_UNRECOGNIZED",
	7: "NAV_NODE_CLIFF",
	8: "NAV_NODE_INTERESTING_EDGE",
	9: "NAV_NODE_NON_INTERESTING_EDGE",
}
var NavNodeContentType_value = map[string]int32{
	"NAV_NODE_UNKNOWN":                     0,
	"NAV_NODE_CLEAR_OF_OBSTACLE":           1,
	"NAV_NODE_CLEAR_OF_CLIFF":              2,
	"NAV_NODE_OBSTACLE_CUBE":               3,
	"NAV_NODE_OBSTACLE_PROXIMITY":          4,
	"NAV_NODE_OBSTACLE_PROXIMITY_EXPLORED": 5,
	"NAV_NODE_OBSTACLE_UNRECOGNIZED":       6,
	"NAV_NODE_CLIFF":                       7,
	"NAV_NODE_INTERESTING_EDGE":            8,
	"NAV_NODE_NON_INTERESTING_EDGE":        9,
}

func (x NavNodeContentType) String() string {
	return proto.EnumName(NavNodeContentType_name, int32(x))
}
func (NavNodeContentType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_nav_map_3496cdcbd9d5fddb, []int{0}
}

// An individual sample of vector's nav map.  This quad's size will vary and
// depends on the resolution the map requires to effectively identify
// boundaries in the environment.
type NavMapQuadInfo struct {
	Content              NavNodeContentType `protobuf:"varint,1,opt,name=content,enum=Anki.Vector.external_interface.NavNodeContentType" json:"content,omitempty"`
	Depth                uint32             `protobuf:"varint,2,opt,name=depth" json:"depth,omitempty"`
	ColorRgba            uint32             `protobuf:"varint,3,opt,name=color_rgba,json=colorRgba" json:"color_rgba,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *NavMapQuadInfo) Reset()         { *m = NavMapQuadInfo{} }
func (m *NavMapQuadInfo) String() string { return proto.CompactTextString(m) }
func (*NavMapQuadInfo) ProtoMessage()    {}
func (*NavMapQuadInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_nav_map_3496cdcbd9d5fddb, []int{0}
}
func (m *NavMapQuadInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NavMapQuadInfo.Unmarshal(m, b)
}
func (m *NavMapQuadInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NavMapQuadInfo.Marshal(b, m, deterministic)
}
func (dst *NavMapQuadInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NavMapQuadInfo.Merge(dst, src)
}
func (m *NavMapQuadInfo) XXX_Size() int {
	return xxx_messageInfo_NavMapQuadInfo.Size(m)
}
func (m *NavMapQuadInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NavMapQuadInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NavMapQuadInfo proto.InternalMessageInfo

func (m *NavMapQuadInfo) GetContent() NavNodeContentType {
	if m != nil {
		return m.Content
	}
	return NavNodeContentType_NAV_NODE_UNKNOWN
}

func (m *NavMapQuadInfo) GetDepth() uint32 {
	if m != nil {
		return m.Depth
	}
	return 0
}

func (m *NavMapQuadInfo) GetColorRgba() uint32 {
	if m != nil {
		return m.ColorRgba
	}
	return 0
}

// General information about the nav map as a whole.
type NavMapInfo struct {
	RootDepth            int32    `protobuf:"varint,1,opt,name=root_depth,json=rootDepth" json:"root_depth,omitempty"`
	RootSizeMm           float32  `protobuf:"fixed32,2,opt,name=root_size_mm,json=rootSizeMm" json:"root_size_mm,omitempty"`
	RootCenterX          float32  `protobuf:"fixed32,3,opt,name=root_center_x,json=rootCenterX" json:"root_center_x,omitempty"`
	RootCenterY          float32  `protobuf:"fixed32,4,opt,name=root_center_y,json=rootCenterY" json:"root_center_y,omitempty"`
	RootCenterZ          float32  `protobuf:"fixed32,5,opt,name=root_center_z,json=rootCenterZ" json:"root_center_z,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NavMapInfo) Reset()         { *m = NavMapInfo{} }
func (m *NavMapInfo) String() string { return proto.CompactTextString(m) }
func (*NavMapInfo) ProtoMessage()    {}
func (*NavMapInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_nav_map_3496cdcbd9d5fddb, []int{1}
}
func (m *NavMapInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NavMapInfo.Unmarshal(m, b)
}
func (m *NavMapInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NavMapInfo.Marshal(b, m, deterministic)
}
func (dst *NavMapInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NavMapInfo.Merge(dst, src)
}
func (m *NavMapInfo) XXX_Size() int {
	return xxx_messageInfo_NavMapInfo.Size(m)
}
func (m *NavMapInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NavMapInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NavMapInfo proto.InternalMessageInfo

func (m *NavMapInfo) GetRootDepth() int32 {
	if m != nil {
		return m.RootDepth
	}
	return 0
}

func (m *NavMapInfo) GetRootSizeMm() float32 {
	if m != nil {
		return m.RootSizeMm
	}
	return 0
}

func (m *NavMapInfo) GetRootCenterX() float32 {
	if m != nil {
		return m.RootCenterX
	}
	return 0
}

func (m *NavMapInfo) GetRootCenterY() float32 {
	if m != nil {
		return m.RootCenterY
	}
	return 0
}

func (m *NavMapInfo) GetRootCenterZ() float32 {
	if m != nil {
		return m.RootCenterZ
	}
	return 0
}

// Requests nav map data from the robot at a specified maximum update frequency.
// Responses in the nav map stream may be sent less frequently if the robot does
// not consider there to be relevant new information.
type NavMapFeedRequest struct {
	Frequency            float32  `protobuf:"fixed32,1,opt,name=frequency" json:"frequency,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NavMapFeedRequest) Reset()         { *m = NavMapFeedRequest{} }
func (m *NavMapFeedRequest) String() string { return proto.CompactTextString(m) }
func (*NavMapFeedRequest) ProtoMessage()    {}
func (*NavMapFeedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_nav_map_3496cdcbd9d5fddb, []int{2}
}
func (m *NavMapFeedRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NavMapFeedRequest.Unmarshal(m, b)
}
func (m *NavMapFeedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NavMapFeedRequest.Marshal(b, m, deterministic)
}
func (dst *NavMapFeedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NavMapFeedRequest.Merge(dst, src)
}
func (m *NavMapFeedRequest) XXX_Size() int {
	return xxx_messageInfo_NavMapFeedRequest.Size(m)
}
func (m *NavMapFeedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NavMapFeedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NavMapFeedRequest proto.InternalMessageInfo

func (m *NavMapFeedRequest) GetFrequency() float32 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

// A full nav map sent from the robot.  It contains an origin_id that
// which can be compared against the robot's current origin_id, general
// info about the map, and a collection of quads representing the map's
// content.
type NavMapFeedResponse struct {
	OriginId             uint32            `protobuf:"varint,1,opt,name=origin_id,json=originId" json:"origin_id,omitempty"`
	MapInfo              *NavMapInfo       `protobuf:"bytes,2,opt,name=map_info,json=mapInfo" json:"map_info,omitempty"`
	QuadInfos            []*NavMapQuadInfo `protobuf:"bytes,3,rep,name=quad_infos,json=quadInfos" json:"quad_infos,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *NavMapFeedResponse) Reset()         { *m = NavMapFeedResponse{} }
func (m *NavMapFeedResponse) String() string { return proto.CompactTextString(m) }
func (*NavMapFeedResponse) ProtoMessage()    {}
func (*NavMapFeedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_nav_map_3496cdcbd9d5fddb, []int{3}
}
func (m *NavMapFeedResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NavMapFeedResponse.Unmarshal(m, b)
}
func (m *NavMapFeedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NavMapFeedResponse.Marshal(b, m, deterministic)
}
func (dst *NavMapFeedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NavMapFeedResponse.Merge(dst, src)
}
func (m *NavMapFeedResponse) XXX_Size() int {
	return xxx_messageInfo_NavMapFeedResponse.Size(m)
}
func (m *NavMapFeedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NavMapFeedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NavMapFeedResponse proto.InternalMessageInfo

func (m *NavMapFeedResponse) GetOriginId() uint32 {
	if m != nil {
		return m.OriginId
	}
	return 0
}

func (m *NavMapFeedResponse) GetMapInfo() *NavMapInfo {
	if m != nil {
		return m.MapInfo
	}
	return nil
}

func (m *NavMapFeedResponse) GetQuadInfos() []*NavMapQuadInfo {
	if m != nil {
		return m.QuadInfos
	}
	return nil
}

func init() {
	proto.RegisterType((*NavMapQuadInfo)(nil), "Anki.Vector.external_interface.NavMapQuadInfo")
	proto.RegisterType((*NavMapInfo)(nil), "Anki.Vector.external_interface.NavMapInfo")
	proto.RegisterType((*NavMapFeedRequest)(nil), "Anki.Vector.external_interface.NavMapFeedRequest")
	proto.RegisterType((*NavMapFeedResponse)(nil), "Anki.Vector.external_interface.NavMapFeedResponse")
	proto.RegisterEnum("Anki.Vector.external_interface.NavNodeContentType", NavNodeContentType_name, NavNodeContentType_value)
}

func init() { proto.RegisterFile("nav_map.proto", fileDescriptor_nav_map_3496cdcbd9d5fddb) }

var fileDescriptor_nav_map_3496cdcbd9d5fddb = []byte{
	// 534 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xdd, 0x4e, 0xdb, 0x3c,
	0x18, 0xfe, 0x92, 0x52, 0x20, 0x2f, 0x5f, 0x51, 0x66, 0xa1, 0x2d, 0x83, 0x95, 0x75, 0xd1, 0x0e,
	0x2a, 0x0e, 0x22, 0xad, 0xbb, 0x82, 0x92, 0xba, 0x28, 0x5a, 0xeb, 0x30, 0x53, 0x18, 0x70, 0x62,
	0x99, 0xc4, 0x65, 0xd1, 0x48, 0x1c, 0x92, 0x50, 0xd1, 0xde, 0xc6, 0xae, 0x66, 0x57, 0xb0, 0x5d,
	0xd6, 0x14, 0xa7, 0xed, 0x50, 0x2b, 0x21, 0xce, 0x9c, 0xe7, 0xcf, 0xcf, 0xeb, 0xd8, 0xd0, 0x48,
	0xf8, 0x84, 0xc5, 0x3c, 0x75, 0xd2, 0x4c, 0x16, 0x12, 0x1d, 0x76, 0x93, 0x1f, 0x91, 0x73, 0x21,
	0x82, 0x42, 0x66, 0x8e, 0x78, 0x2c, 0x44, 0x96, 0xf0, 0x3b, 0x16, 0x25, 0x85, 0xc8, 0xc6, 0x3c,
	0x10, 0xf6, 0x4f, 0x0d, 0x76, 0x09, 0x9f, 0x0c, 0x79, 0xfa, 0xf5, 0x81, 0x87, 0x5e, 0x32, 0x96,
	0x68, 0x00, 0x5b, 0x81, 0x4c, 0x0a, 0x91, 0x14, 0x96, 0xd6, 0xd2, 0xda, 0xbb, 0x9d, 0x8e, 0xf3,
	0x7c, 0x88, 0x43, 0xf8, 0x84, 0xc8, 0x50, 0xb8, 0x95, 0x6b, 0x34, 0x4d, 0x05, 0x5d, 0x44, 0xa0,
	0x3d, 0xa8, 0x87, 0x22, 0x2d, 0xbe, 0x5b, 0x7a, 0x4b, 0x6b, 0x37, 0x68, 0xf5, 0x81, 0x9a, 0x00,
	0x81, 0xbc, 0x93, 0x19, 0xcb, 0x6e, 0x6f, 0xb8, 0x55, 0x53, 0x94, 0xa1, 0x10, 0x7a, 0x7b, 0xc3,
	0xed, 0x5f, 0x1a, 0x40, 0xd5, 0x4a, 0x35, 0x6a, 0x02, 0x64, 0x52, 0x16, 0xac, 0x0a, 0x2a, 0x4b,
	0xd5, 0xa9, 0x51, 0x22, 0x3d, 0x15, 0xd6, 0x82, 0xff, 0x15, 0x9d, 0x47, 0x33, 0xc1, 0xe2, 0x58,
	0xed, 0xa4, 0x53, 0x65, 0x39, 0x8b, 0x66, 0x62, 0x18, 0x23, 0x1b, 0x1a, 0x4a, 0x11, 0x88, 0xb2,
	0x33, 0x7b, 0x54, 0x3b, 0xea, 0x74, 0xa7, 0x04, 0x5d, 0x85, 0x5d, 0xae, 0x6a, 0xa6, 0xd6, 0xc6,
	0xaa, 0xe6, 0x6a, 0x55, 0x33, 0xb3, 0xea, 0xab, 0x9a, 0x6b, 0xfb, 0x13, 0xbc, 0xaa, 0xaa, 0xf7,
	0x85, 0x08, 0xa9, 0xb8, 0x7f, 0x10, 0x79, 0x81, 0xde, 0x81, 0x31, 0xce, 0xca, 0x75, 0x12, 0x4c,
	0xd5, 0x00, 0x3a, 0xfd, 0x07, 0xd8, 0xbf, 0x35, 0x40, 0x4f, 0x3d, 0x79, 0x2a, 0x93, 0x5c, 0xa0,
	0x03, 0x30, 0x64, 0x16, 0xdd, 0x46, 0x09, 0x8b, 0x42, 0x65, 0x6a, 0xd0, 0xed, 0x0a, 0xf0, 0x42,
	0x84, 0x61, 0x3b, 0xe6, 0x29, 0x8b, 0x92, 0xb1, 0x54, 0x03, 0xef, 0x74, 0x8e, 0x5e, 0xf0, 0x9b,
	0xe6, 0x27, 0x4a, 0xb7, 0xe2, 0xf9, 0xd1, 0x0e, 0x01, 0xee, 0x1f, 0x78, 0xa8, 0x72, 0x72, 0xab,
	0xd6, 0xaa, 0xb5, 0x77, 0x3a, 0xce, 0xcb, 0x82, 0x16, 0x17, 0x86, 0x1a, 0xf7, 0xf3, 0x55, 0x7e,
	0xf4, 0x47, 0x57, 0x93, 0xac, 0xdc, 0x06, 0xb4, 0x07, 0x26, 0xe9, 0x5e, 0x30, 0xe2, 0xf7, 0x30,
	0x3b, 0x27, 0x5f, 0x88, 0xff, 0x8d, 0x98, 0xff, 0xa1, 0x43, 0xd8, 0x5f, 0xa2, 0xee, 0x00, 0x77,
	0x29, 0xf3, 0xfb, 0xcc, 0x3f, 0x3e, 0x1b, 0x75, 0xdd, 0x01, 0x36, 0x35, 0x74, 0x00, 0x6f, 0xd6,
	0x79, 0x77, 0xe0, 0xf5, 0xfb, 0xa6, 0x8e, 0xf6, 0xe1, 0xf5, 0x92, 0x5c, 0x78, 0x98, 0x7b, 0x7e,
	0x8c, 0xcd, 0x1a, 0x7a, 0x0f, 0x07, 0xeb, 0xdc, 0x29, 0xf5, 0x2f, 0xbd, 0xa1, 0x37, 0xba, 0x32,
	0x37, 0x50, 0x1b, 0x3e, 0x3e, 0x23, 0x60, 0xf8, 0xf2, 0x74, 0xe0, 0x53, 0xdc, 0x33, 0xeb, 0xc8,
	0x86, 0xc3, 0x75, 0xe5, 0x39, 0xa1, 0xd8, 0xf5, 0x4f, 0x88, 0x77, 0x8d, 0x7b, 0xe6, 0x26, 0x42,
	0xb0, 0xfb, 0xa4, 0x67, 0x59, 0x6f, 0x0b, 0x35, 0xe1, 0xed, 0x12, 0xf3, 0xc8, 0x08, 0x53, 0x7c,
	0x36, 0xf2, 0xc8, 0x09, 0xc3, 0xbd, 0x13, 0x6c, 0x6e, 0xa3, 0x0f, 0xd0, 0x5c, 0xd2, 0xc4, 0x27,
	0xeb, 0x12, 0xe3, 0x66, 0x53, 0x3d, 0xe0, 0xcf, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x10, 0x13,
	0xff, 0xb4, 0xd1, 0x03, 0x00, 0x00,
}
